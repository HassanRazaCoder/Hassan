# -*- coding: utf-8 -*-
"""Assignment#2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/183kfma1zbXqEa6zD1ZJ2TW5tus6Eyb4x
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.datasets import load_wine
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA
from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis as QDA
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier

wine = load_wine()
X_wine, y_wine = wine.data, wine.target
Xw_train, Xw_test, yw_train, yw_test = train_test_split(X_wine, y_wine, test_size=0.3, random_state=42)

scaler = StandardScaler()
Xw_train = scaler.fit_transform(Xw_train)
Xw_test = scaler.transform(Xw_test)

"""# New section"""

from sklearn.datasets import fetch_openml

mnist = fetch_openml('mnist_784', version=1, as_frame=False)
X_mnist, y_mnist = mnist.data, mnist.target.astype(int)

# Reduce size for faster training
X_mnist_small = X_mnist[:10000]
y_mnist_small = y_mnist[:10000]

Xm_train, Xm_test, ym_train, ym_test = train_test_split(X_mnist_small, y_mnist_small, test_size=0.3, random_state=42)

scaler = StandardScaler()
Xm_train = scaler.fit_transform(Xm_train)
Xm_test = scaler.transform(Xm_test)

def evaluate_models(X_train, X_test, y_train, y_test):
    results = {}
    for name, model in models.items():
        try:
            model.fit(X_train, y_train)
            y_pred = model.predict(X_test)
            report = classification_report(y_test, y_pred, output_dict=True, zero_division=0)
            results[name] = {
                'Accuracy': report['accuracy'],
                'Precision': np.mean([v['precision'] for k,v in report.items() if k.isdigit()]),
                'Recall': np.mean([v['recall'] for k,v in report.items() if k.isdigit()]),
                'F1-score': np.mean([v['f1-score'] for k,v in report.items() if k.isdigit()])
            }
        except Exception as e:
            results[name] = {'Error': str(e)}
    return pd.DataFrame(results).T

wine_results = evaluate_models(Xw_train, Xw_test, yw_train, yw_test)

print(wine_results.sort_values("Accuracy", ascending=False))

mnist_results = evaluate_models(Xm_train, Xm_test, ym_train, ym_test)

wine_results[['Accuracy', 'F1-score']].plot(kind='bar', title='Wine Dataset')
plt.ylabel('Score')
plt.show()

mnist_results[['Accuracy', 'F1-score']].plot(kind='bar', title='MNIST Dataset')
plt.ylabel('Score')
plt.show()